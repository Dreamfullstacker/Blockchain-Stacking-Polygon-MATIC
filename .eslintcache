[{"E:\\Blockchain\\Task\\2022_3_11 PolygonReactSite\\polygon-matic\\src\\index.js":"1","E:\\Blockchain\\Task\\2022_3_11 PolygonReactSite\\polygon-matic\\src\\App.js":"2","E:\\Blockchain\\Task\\2022_3_11 PolygonReactSite\\polygon-matic\\src\\reportWebVitals.js":"3","E:\\Blockchain\\Task\\2022_3_11 PolygonReactSite\\polygon-matic\\src\\utils\\web3API.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":16405,"mtime":1647487374169,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":11197,"mtime":1647621984671,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yu5si8",{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"E:\\Blockchain\\Task\\2022_3_11 PolygonReactSite\\polygon-matic\\src\\index.js",[],"E:\\Blockchain\\Task\\2022_3_11 PolygonReactSite\\polygon-matic\\src\\App.js",["20"],"import React, {useEffect, useState} from \"react\";\nimport headerback from './assets/header.png';\nimport logo from './assets/PolygonLogo.png';\nimport contactIcon from './assets/ClipboardText.png'\nimport './App.css';\nimport {connectToWallet, web3_contact_balance , web3_total_deposit , web3_user_deposit_count , web3_user_total_withdraw , web3_user_total_deposit , web3_user_referral_bonus , web3_available_balance , stakeMATIC, reinvest , WithdrawFn , web3_referred_users} from './utils/web3API'\n\nfunction App() {\n  const [ walletAddress, setWalletAddress ] = useState(\"\")\n  const [contact_balance , setContactBalance ] = useState(0.000)\n  const [total_deposit , setTotalDeposit] = useState(0)\n  const [user_deposit_count , setUserDepositCount] = useState(0)\n  const [user_total_deposit , setUserTotalDeposit] = useState(0.000)\n  const [user_total_withdraw , setUserTotalWithdraw] = useState(0.000)\n  const [user_referral_bonus , setUserReferralBonus] = useState(0.000)\n  const [referred_user , setReferredUsers] = useState(0.000)\n  const [amount_plan1, setAmountPlan1] = useState(0.000)\n  const [amount_plan2, setAmountPlan2] = useState(0.000)\n  const [referral_address, setReferralAddress] = useState(\"\")\n  const [reinvest_show , setReinvestShow] = useState(\"\")\n  const [available_balance , setAvailableBalance] = useState(0)\n  // const reinvest_show = false\n  useEffect(()=> {\n\n    if(!walletAddress){   \n     walletConnect()\n     getContactBalance()\n     getTotalDeposit()\n     getUserDepositCount()\n     getUserTotalDeposit()\n     getUserTotalWithdraw()\n     getUserReferralBonus()\n     getReferredUsers()\n     getUserAvailableBalance()\n    }\n\n    // getUSDValue()\n  })\n\n  const walletConnect = async () => {\n    const res = await connectToWallet()//connect to metamask\n    setWalletAddress(res)//set wallet adderess as the res\n  }\n  \n  const getContactBalance = async () => {//get Contract balance\n    const res = await web3_contact_balance()\n    setContactBalance(parseFloat(res).toFixed(4))\n  }\n  const getTotalDeposit = async () => {//get Total deposit\n    const res = await web3_total_deposit()\n    console.log(res)\n    setTotalDeposit(parseFloat(res).toFixed(4))\n  }\n  const getUserDepositCount = async () => {//get User deposit count\n    const res = await web3_user_deposit_count()\n    setUserDepositCount(res)\n  }\n  const getUserTotalDeposit = async () => {//get user total deposit\n    const res = await web3_user_total_deposit()\n    setUserTotalDeposit(parseFloat(res).toFixed(4))\n  }\n  const getUserTotalWithdraw = async () => {//get user total withdraw\n    const res = await web3_user_total_withdraw()\n    setUserTotalWithdraw(parseFloat(res).toFixed(4))\n  }\n  const getUserReferralBonus = async () => {//get user referral bonus\n    const res = await web3_user_referral_bonus()\n    setUserReferralBonus(res)\n  }\n  const getReferredUsers = async () => {//get referred users\n    const res = await web3_referred_users()\n    setReferredUsers(res)\n  }\n  const getUserAvailableBalance = async () => {\n    const res = await web3_available_balance()\n    setAvailableBalance(parseFloat(res).toFixed(4))\n  }\n\n  const formattedAddress = () => {\n    if(walletAddress) {\n      return `${walletAddress.slice(0,5)}...${walletAddress.slice(-5)}`\n    }\n  }\n  const callStakePlan1 = async () => {\n    var ref_add = document.getElementById('wallet_address').value\n    const res = await stakeMATIC(ref_add , amount_plan1, 0)\n    return res \n  }\n  const callStakePlan2 = async () => {\n    var ref_add = document.getElementById('wallet_address').value\n    const res = await stakeMATIC(ref_add , amount_plan2, 1)\n    return res \n  }\n  const Reinvest_show = () => {\n    if(reinvest_show === false)\n    setReinvestShow(true)\n      else setReinvestShow(false)\n    console.log(reinvest_show)\n  }\n  const Reinvest = async (plan) => {\n    const res = await reinvest(plan)\n    return res\n  }\n  const Withdraw = async () => {\n    const res = await WithdrawFn()\n    return res\n  }\n  const PasteWalletAddress = async() => {\n    const text = await navigator.clipboard.readText();\n    console.log(text)\n    document.getElementById('wallet_address').value = text\n  }\n\n// const ipfsClient = require(\"ipfs-http-client\");\n// const ipfs = ipfsClient({\n//   host: \"ipfs.infura.io\",\n//   port: 5001,\n//   protocol: \"https\",\n// });\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"> \n        <div className=\"header-logo\" style={{ backgroundImage: `url(${headerback})`, backgroundSize : 'cover' }}>\n          <div>\n            <p className='maintitle primary-title m-5 mt-3 mb-0  text-start'>\n              Extra Matic\n            </p>\n            <p className='primary-title m-5 mt-0 text-start'>\n              by Polygon\n            </p>\n          </div>\n          <div>\n          {/* <button className='connect-wallet m-5'> */}\n            <button className='connect-wallet m-5'  onClick={()=> {walletConnect()}}>\n            <span>\n              { walletAddress ? formattedAddress () : \"Connect to Wallet\" }\n              </span>\n            </button>\n          </div>\n        </div>\n        <div>\n        <p className='header-content primary-title header-content'>\n          Extra Matic is an ROI smart contract platform powered by the Polygon Matic network, aiming to provide long term sustainable income\n        </p>\n        </div>\n      </header>\n      <main>\n        <div className='mainpart-one'>\n          <button className='contact-btn'>\n            Audit\n          </button>\n          <button className='contact-btn'>\n            Contract\n          </button>\n          <button className='contact-btn'>\n            Telegram\n          </button>\n        </div>\n        <div className='container-fluid custom-p-5'>\n          <div className='row custom-p-5 d-flex justify-content-between'>\n            <div className='col-xl-3 col-lg-4 col-md-12 col-sm-12 py-3'>\n              <div className='row'>\n                <div className='col-xl-12 col-lg-12 col-md-6 col-sm-12'>\n                  <div className='plan-subpart mb-2'>\n                    <p className='secondary-title p-5' id='contract-balance'>\n                      {contact_balance}\n                    </p>\n                    <p className='secondary-subtitle p-2'>\n                      Contract Balance\n                    </p>\n                  </div>\n                </div>\n                <div className='col-xl-12 col-lg-12 col-md-6 col-sm-12'>\n                  <div className='plan-subpart'>\n                    <p className='secondary-title p-5' id='total-deposit'>\n                      {total_deposit}\n                    </p>\n                    <p className='secondary-subtitle p-2'>\n                      Total Deposit\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className='col-xl-3 col-lg-4 col-md-6 col-sm-12 py-3'>\n              <div className='primary-header d-flex justify-content-center'>\n                <p className='primary-title'>\n                  Plan 1\n                </p>\n              </div>\n              <div className='primary-body p-5 pb-1'>\n                <div className='plan-deadline rounded-pill'>\n                  <p className='py-3 primary-title'>\n                    17% daily<br></br> for 8 days\n                  </p>\n                </div>\n                <p className='plan-totalvalue'>\n                  total 136%\n                </p>\n                <div>\n                  <input type=\"text\" pattern=\"[0-9]*\" className='plan-valueinput' onChange={(e)=> {setAmountPlan1(e.target.value)}}>\n\n                  </input>\n                </div>\n                <div>\n                  <button className='deposit-btn primary-title' onClick={() => callStakePlan1()} disabled={amount_plan1 ? false : true}>\n                  Deposit\n                  </button>\n                </div>  \n                <div className='secondary-content pt-4 pb-3'>\n                  Minimum deposit 0.1 Matic\n                </div>\n              </div>\n              \n            </div>\n            <div className='col-xl-3 col-lg-4 col-md-6 col-sm-12 py-3'>\n              <div className='primary-header d-flex justify-content-center'>\n                <p className='primary-title'>\n                  Plan 2\n                </p>\n              </div>\n              <div className='primary-body p-5 pb-1'>\n                <div className='plan-deadline rounded-pill'>\n                  <p className='py-3 primary-title'>\n                  7% daily<br></br> for 60 days\n                  </p>\n                </div>\n                <p className='plan-totalvalue'>\n                  total 420%\n                </p>\n                <input type=\"text\" pattern=\"[0-9]*\" className='plan-valueinput' onChange={(e)=> {setAmountPlan2(e.target.value)}}>\n\n                </input>\n                <div>\n                  <button className='deposit-btn primary-title'  onClick={() => callStakePlan2()} disabled={amount_plan2 ? false : true}>\n                  Deposit\n                  </button>\n                </div>\n                <div className='secondary-content pt-4 pb-3'>\n                  Minimum deposit 0.1 Matic\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className='container-fluid custom-p-5'>\n          <div className='row custom-p-5 d-flex justify-content-between'>\n            <div className='col-lg-6 col-md-12 col-sm-12 pt-5 custom-pr-10'>\n              <div className='primary-header d-flex justify-content-center'>\n                <div>\n                  <p className='primary-title'>\n                    Personal Dashboard\n                  </p>\n                </div>\n              </div>\n              <div className='primary-body'>\n                  <div className='container row'>\n                    <div className='col-xs-12 col-sm-4  d-flex  align-items-center justify-content-center'>\n                      <div>\n                      <p className='secondary-title'>{available_balance}</p>\n                      <p className='secondary-subtitle'>Available Balance</p>\n                      </div>\n                    </div>\n                    <div className='col-xs-12 col-sm-4 py-3'>\n                      <div>\n                        <button className='secondary-background my-2 primary-subtitle' onClick={() => Reinvest_show()}>\n                          Reinvest\n                        </button>\n                      </div>\n                      <div className={reinvest_show ? \"show\" : \"hidden\"}>\n                        <button className='secondary-background my-2 primary-subtitle reinvest_btn' onClick={() => Reinvest(0)}>\n                          Reinvest Plan1\n                        </button>\n                        <button className='secondary-background my-2 primary-subtitle reinvest_btn' onClick={() => Reinvest(1)}>\n                          Reinvest Plan2 with 5%bonus\n                        </button>\n                      </div>\n                      <div>\n                        <button className='secondary-background my-2 primary-subtitle' onClick={() => Withdraw()}>\n                          Withdraw\n                        </button>\n                      </div>\n                    </div>\n                    <div className='col-xs-12 col-sm-4 d-flex align-items-center justify-content-center'>\n                      <img src={logo} alt = 'logo'></img>\n                    </div>\n                  </div>\n                  <div className='container row'>\n                    <div className='secondary-background dashboard-content'>\n                      <p className='primary-content text-start pt-3'>- Minimum reinvest 0.1 MATIC, Get 5% reinvest bonus on 60 days plan.</p>\n                      <p className='primary-content text-start'>\n                        - Minimum withdrawal 1 MATIC, and 20% of each withdrawal will be converted to auto reinvest on 60 days plan with 5% reinvest bonus\n                      </p>\n                    </div>\n                  </div>\n                  <div className='container row py-3'>\n                    <div className='col-xs-12 col-sm-6 p-2'>\n                      <div className='secondary-background pt-2'>\n                        <p className='primary-title pb-0 mb-0'>{user_deposit_count}</p>\n                        <p className='primary-subtitle'>Deposit Count</p>\n                      </div>\n                    </div>\n                    <div className='col-xs-12 col-sm-6 p-2'>\n                      <div className='secondary-background pt-2'>\n                        <p className='primary-title pb-0 mb-0'>{user_total_deposit}</p>\n                        <p className='primary-subtitle'>Total Deposit</p>\n                      </div>\n                    </div>\n                  </div>\n                  <div className='container row pb-3'>\n                    <div className='col-xs-12 col-sm-6 p-2 '>\n                      <div className='secondary-background pt-2'>\n                        <p className='primary-title pb-0 mb-0'>{user_total_withdraw}</p>\n                        <p className='primary-subtitle'>Total Withdraw</p>\n                      </div>\n                    </div>\n                    <div className='col-xs-12 col-sm-6 p-2 '>\n                      <div className='secondary-background pt-2'>\n                        <p className='primary-title pb-0 mb-0'>{user_referral_bonus}</p>\n                        <p className='primary-subtitle'>Total Referral Bonus</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              <div>\n                <div className='primary-header d-flex justify-content-center mt-5'>\n                  <p className='primary-title'>\n                    Referral\n                  </p>\n                </div>\n                <div className='primary-body'>\n                  <p className='secondary-title'>level 1      =      5%</p>\n                  <p className='secondary-title'>level 2      =      3%</p>\n                  <p className='secondary-title'>level 3      =      1%</p>\n                </div>\n              </div>\n            </div>\n            <div className='col-lg-6 col-md-12 col-sm-12 pt-5 custom-pl-10'>\n              <div>\n                <div className='primary-header d-flex justify-content-center'>\n                  <p className='primary-title'>\n                    Your Deposits\n                  </p>\n                </div>\n                <div className='primary-body py-4'>\n                  <p className='py-3'></p>\n                </div>\n              </div>\n              <div className=' my-5'>\n                <div className='primary-header d-flex justify-content-center'>\n                  <p className='primary-title'>\n                    Your Referral Link\n                  </p>\n                </div>\n                <div className='primary-body p-4'>\n                  <div className='row'>\n                    <div className='col-10'>\n                      <input className='plan-valueinput' id=\"wallet_address\" onChange={(e)=> {setReferralAddress(e.target.value)}}></input>\n                    </div>\n                    <div className='col-2'>\n                      <button className='primary-background'  onClick={PasteWalletAddress}><img src={contactIcon} alt = 'paste address'></img></button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className='plan-subpart'>\n              <p className='secondary-title py-5 m-0'>{referred_user}</p>\n              <p className='secondary-subtitle'>Referred Users</p>\n              </div>\n              \n            </div>\n          </div>\n        </div>\n      </main>\n      <footer>\n        <div className='p-4'>\n          <div className='footer-part'>\n            <button className='footer-contact-btn'>\n              HazeCrypto audit\n            </button>\n            <button className='footer-contact-btn'>\n              Contract\n            </button>\n            <button className='footer-contact-btn'>\n              Telegram\n            </button>\n          </div>\n        </div>\n        <div>\n          <p className='primary-title px-2'>\n            Copyright © 2022 ExtraMatic.app . All rights reserved\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","E:\\Blockchain\\Task\\2022_3_11 PolygonReactSite\\polygon-matic\\src\\reportWebVitals.js",[],"E:\\Blockchain\\Task\\2022_3_11 PolygonReactSite\\polygon-matic\\src\\utils\\web3API.js",["21","22"],"import Web3 from 'web3'\nimport contractAbi from '../config/abi.json'\nimport { toast } from 'react-toastify';\n\nlet Contract = require(\"web3-eth-contract\");\nContract.setProvider(\"https://rpc-mainnet.maticvigil.com\")\nexport const connectToWallet = async () => {//connect the metamask using web3 and get current user account\n    let web3;\n    try {\n        if (window.ethereum) {\n            web3 = new Web3(window.ethereum)\n            await window.ethereum.request({ method: 'eth_requestAccounts' })\n        } else if (window.web3) {\n            web3 = new Web3(window.web3.currentProvider || \"https://rpc-mainnet.maticvigil.com\")\n        }\n        const accounts = await web3.eth.getAccounts();\n        return accounts[0]\n    } catch (error) {\n        // console.log(\"Error: \", error)\n        return false\n    }\n}\n\nexport const getWeb3 = async () => {//first connect the EVM and return web3 instance. always use!\n    let web3;\n    if (window.ethereum) {\n        web3 = new Web3(window.ethereum);\n    } else if (window.web3) {\n        await window.web3.currentProvider.enable();\n        web3 = new Web3(window.web3.currentProvider);\n    } else {\n        console.log('No web3 instance detected.');\n        return false;\n    }\n    return web3;\n}\n\nexport const web3_contact_balance = async () => {\n    const web3 = await getWeb3();\n    if (!web3) {\n        console.log(\"No web3 instance found.\");\n        return false;\n    }\n    try {\n        let extraMaticContract = new Contract(contractAbi, \"0x2a2cf93bc92537a596e7956315ce914186d0242f\" );//create instance of contract with abi and address\n        const res = await extraMaticContract.methods.getSiteInfo().call()\n        let contact_balance = web3.utils.fromWei(res['_contractBalance'])\n        // console.log(\"contract_balance\" + res['_contractBalance'])\n        return contact_balance\n       \n    } catch (e) {\n        console.log(\"failed\")\n        return false;\n    }\n}\n\nexport const web3_total_deposit = async () => {\n    const web3 = await getWeb3();\n    if (!web3) {\n        toast.error(\"No web3 instance found.\");\n        return false;\n    }\n    try {\n        let extraMaticContract = new Contract(contractAbi, \"0x2a2cf93bc92537a596e7956315ce914186d0242f\" );//create instance of contract with abi and address\n        const res = await extraMaticContract.methods.getSiteInfo().call()//get total staked money value\n        let total_deposit = web3.utils.fromWei(res['_totalInvested'])\n        // console.log(\"total_deposit\" + res['_totalInvested'])\n        return total_deposit \n       \n    } catch (e) {\n        return false;\n    }\n}\n\nexport const web3_user_deposit_count = async () => {\n    const web3 = await getWeb3();\n    if (!web3) {\n        console.log(\"No web3 instance found.\");\n        return false;\n    }\n    try {\n        let extraMaticContract = new Contract(contractAbi, \"0x2a2cf93bc92537a596e7956315ce914186d0242f\" );//create instance of contract with abi and address\n        const accounts = await web3.eth.getAccounts();\n        const res = await extraMaticContract.methods.getUserAmountOfDeposits(accounts[0]).call()//get total staked money value\n        // let contact_balance = web3.utils.fromWei(res)\n        \n        return res \n       \n    } catch (e) {\n        return false;\n    }\n}\n\nexport const web3_user_total_deposit = async () => {\n    const web3 = await getWeb3();\n    if (!web3) {\n        console.log(\"No web3 instance found.\");\n        return false;\n    }\n    try {\n        let extraMaticContract = new Contract(contractAbi, \"0x2a2cf93bc92537a596e7956315ce914186d0242f\" );//create instance of contract with abi and address\n        const accounts = await web3.eth.getAccounts();\n        const res = await extraMaticContract.methods.getUserInfo(accounts[0]).call()//get total staked money value\n        let contact_balance = web3.utils.fromWei(res['totalDeposit'])\n        return contact_balance \n       \n    } catch (e) {\n        return false;\n    }\n}\n\nexport const web3_user_total_withdraw = async () => {\n    const web3 = await getWeb3();\n    if (!web3) {\n        console.log(\"No web3 instance found.\");\n        return false;\n    }\n    try {\n        let extraMaticContract = new Contract(contractAbi, \"0x2a2cf93bc92537a596e7956315ce914186d0242f\" );//create instance of contract with abi and address\n        const accounts = await web3.eth.getAccounts();\n        const res = await extraMaticContract.methods.getUserInfo(accounts[0]).call()//get total staked money value\n        let contact_balance = web3.utils.fromWei(res['totalWithdrawn'])\n        return contact_balance \n       \n    } catch (e) {\n        return false;\n    }\n}\n\nexport const web3_user_referral_bonus = async () => {\n    const web3 = await getWeb3();\n    if (!web3) {\n        console.log(\"No web3 instance found.\");\n        return false;\n    }\n    try {\n        let extraMaticContract = new Contract(contractAbi, \"0x2a2cf93bc92537a596e7956315ce914186d0242f\" );//create instance of contract with abi and address\n        const accounts = await web3.eth.getAccounts();\n        const res = await extraMaticContract.methods.getUserReferralTotalBonus(accounts[0]).call()//get total staked money value\n        let contact_balance = web3.utils.fromWei(res)\n        return contact_balance \n       \n    } catch (e) {\n        return false;\n    }\n}\n\nexport const web3_referred_users = async () => {\n    const web3 = await getWeb3();\n    if (!web3) {\n        console.log(\"No web3 instance found.\");\n        return false;\n    }\n    try {\n        let extraMaticContract = new Contract(contractAbi, \"0x2a2cf93bc92537a596e7956315ce914186d0242f\" );//create instance of contract with abi and address\n        const accounts = await web3.eth.getAccounts();\n        const res = await extraMaticContract.methods.getUserTotalReferrals(accounts[0]).call()//get total staked money value\n        // let contact_balance = web3.utils.fromWei(res)\n        return res \n       \n    } catch (e) {\n        return false;\n    }\n}\n\nexport const web3_available_balance = async () => {\n    const web3 = await getWeb3();\n    if (!web3) {\n        console.log(\"No web3 instance found.\");\n        return false;\n    }\n    try {\n        let extraMaticContract = new Contract(contractAbi, \"0x2a2cf93bc92537a596e7956315ce914186d0242f\" );//create instance of contract with abi and address\n        const accounts = await web3.eth.getAccounts();\n        const res = await extraMaticContract.methods.getUserAvailable(accounts[0]).call()//get total staked money value\n        let contact_balance = web3.utils.fromWei(res)\n        return contact_balance \n       \n    } catch (e) {\n        return false;\n    }\n}\n\nexport const stakeMATIC = async (referral_address , amount, planId) => {//stake amount of BNB to the planId's plan\n    const web3 = await getWeb3();\n    if (!web3) {\n        toast.error(\"No web3 instance found.\");\n        return false;\n    }\n    try {\n        let connectedAddress = await connectToWallet();\n        console.log(connectedAddress);\n        let extraMaticContract = new Contract(contractAbi, \"0x2a2cf93bc92537a596e7956315ce914186d0242f\" );\n        const txCount = await web3.eth.getTransactionCount(connectedAddress);\n        console.log(referral_address);\n        if(!referral_address)\n        var referrer = \"0x2D19c11f66BE26Ba13333C428aD2050630B8176b\"\n        else referrer = referral_address\n        console.log(referrer);\n        const myNewData = await extraMaticContract.methods.invest(referrer, planId).encodeABI()\n        let weiPrice = web3.utils.toWei(`${amount}`, 'ether');\n        const gas2 = await web3.eth.getGasPrice()\n        const transactionParameters = {\n            nonce: web3.utils.toHex(txCount),\n            gasPrice: web3.utils.toHex(gas2),\n            // gasLimit: web3.utils.toHex(gasLimit),\n            to: \"0x2a2cf93bc92537a596e7956315ce914186d0242f\" ,\n            from: connectedAddress,\n            data: myNewData,\n            value: web3.utils.toHex(weiPrice)\n        }\n\n        // As with any RPC call, it may throw an error\n        const txHash = await window.ethereum.request({\n            method: 'eth_sendTransaction',\n            params: [transactionParameters],\n        });\n        \n        if (txHash) {\n            console.log(\"Transaction Done Successfully.\");\n        }\n    } catch (e) {\n        toast.error(e.message);\n        return false;\n    }\n}\n\nexport const reinvest = async (planId) => {\n    const web3 = await getWeb3();\n    const amount = '0.1';\n    var referrer = \"0x2D19c11f66BE26Ba13333C428aD2050630B8176b\"\n    if (!web3) {\n        toast.error(\"No web3 instance found.\");\n        return false;\n    }\n    try {\n        let connectedAddress = await connectToWallet();\n        console.log(connectedAddress);\n        let extraMaticContract = new Contract(contractAbi, \"0x2a2cf93bc92537a596e7956315ce914186d0242f\" );\n        const txCount = await web3.eth.getTransactionCount(connectedAddress);\n        const myNewData = await extraMaticContract.methods.reinvest(planId).encodeABI()\n        console.log(myNewData);\n        let weiPrice = web3.utils.toWei(`${amount}`, 'ether');\n        const gas2 = await web3.eth.getGasPrice()\n        const transactionParameters = {\n            nonce: web3.utils.toHex(txCount),\n            gasPrice: web3.utils.toHex(gas2),\n            // gasLimit: web3.utils.toHex(gasLimit),\n            to: \"0x2a2cf93bc92537a596e7956315ce914186d0242f\" ,\n            from: connectedAddress,\n            data: myNewData,\n            // value: web3.utils.toHex(weiPrice)\n        }\n\n        // As with any RPC call, it may throw an error\n        const txHash = await window.ethereum.request({\n            method: 'eth_sendTransaction',\n            params: [transactionParameters],\n        });\n        \n        if (txHash) {\n            console.log(\"Transaction Done Successfully.\");\n        }\n    } catch (e) {\n        console.log(e.message);\n        return false;\n    }\n}\n\nexport const WithdrawFn = async () => {\n    const web3 = await getWeb3();\n    if (!web3) {\n        toast.error(\"No web3 instance found.\");\n        return false;\n    }\n    try {\n        let connectedAddress = await connectToWallet();\n        let extraMaticContract = new Contract(contractAbi, \"0x2a2cf93bc92537a596e7956315ce914186d0242f\" );\n        const txCount = await web3.eth.getTransactionCount(connectedAddress);//get total trasaction count sent by current address\n        const myNewData = await extraMaticContract.methods.withdraw().encodeABI()\n        const gas2 = await web3.eth.getGasPrice()\n        const transactionParameters = {\n            nonce: web3.utils.toHex(txCount),\n            gasPrice: web3.utils.toHex(gas2),\n            // gasLimit: web3.utils.toHex(gasLimit),\n            to: \"0x2a2cf93bc92537a596e7956315ce914186d0242f\",\n            from: connectedAddress,\n            data: myNewData,\n        }\n        // As with any RPC call, it may throw an error\n        const txHash = await window.ethereum.request({\n            method: 'eth_sendTransaction',\n            params: [transactionParameters],\n        });\n        if (txHash) {\n            toast.success(\"Transaction Done Successfully.\");\n            return\n        }\n    } catch (e) {\n        toast.error(e.message);\n        return false;\n    }\n}\n",{"ruleId":"23","severity":1,"message":"24","line":19,"column":10,"nodeType":"25","messageId":"26","endLine":19,"endColumn":26},{"ruleId":"23","severity":1,"message":"27","line":231,"column":9,"nodeType":"25","messageId":"26","endLine":231,"endColumn":17},{"ruleId":"23","severity":1,"message":"28","line":243,"column":13,"nodeType":"25","messageId":"26","endLine":243,"endColumn":21},"no-unused-vars","'referral_address' is assigned a value but never used.","Identifier","unusedVar","'referrer' is assigned a value but never used.","'weiPrice' is assigned a value but never used."]